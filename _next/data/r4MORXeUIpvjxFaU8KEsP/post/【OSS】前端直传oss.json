{"pageProps":{"post":{"id":24,"title":"【OSS】前端直传oss","created_at":"2024-12-03T09:20:59Z","updated_at":"2024-12-03T09:21:04Z","content":"> 在上传文件时，为了降低后端服务器压力、提高上传速度等。可由前端直接上传至oss。\r\n> \r\n> 当使用 npm 的方式使用 oss sdk 时，build 可能会异常。可以采用 cdn 的方式使用。\r\n> \r\n> Github：[ali-oss](https://github.com/ali-sdk/ali-oss)\r\n\r\n### 实现逻辑\r\n\r\n如果是批量上传，则需控制上传队列，单个依次执行上传。\r\n\r\n单个文件上传简单逻辑如下：\r\n\r\n1. 获取 oss config\r\n2. 初始化 oss sdk\r\n3. 执行分片上传\r\n   - 这里不论文件大小都采用分片上传的方式，目的是为了简化，统一逻辑。\r\n   - 可针对不同文件指定不同的分片数量（例如：文件小于1MB则分1片）\r\n4. 上传成功后上报 oss path\r\n\r\n### 异常处理\r\n\r\n1. 初始化 oss sdk 需要有 token，由于token直接输出至前端，出于安全考虑 token 必须设置有效期，例如 5 分钟。因此客户端需 在 token 过期之前，提前刷新 token。防止 token 过期导致上传失败。\r\n   - 为什么 5 分钟有效期还不够用？客户端网络不可控\r\n2. 在进行分片上传时，如果上传失败，可设置自动重试。重试次数可根据业务自定。\r\n   - 断点续传？可根据业务自行实现。\r\n\r\n### 能力扩展\r\n\r\n1. 上传速度\r\n   - 上传开始前 记录当前时间为开始时间\r\n   - 通过上传的 progress 回调。可以获得上传进度，进而可以获取已上传的文件大小。如果以此刻为结束时间的话，那么就可大约计算出上传速度\r\n   - 由于 progress 回调频率不够高，如果需要更高频率显示，可自行实现加速逻辑。比如在一次 progress 回调中计算多次结果。\r\n2. 单文件上传进度\r\n   - 通过 progress 回调根据已上传文件大小，计算得出当前上传进度。\r\n3. 整体上传任务进度\r\n   - 如果需要显示批量的进度，则可在每个文件上传后或者每个文件的 progress 回调（更精细的进度显示）中计算。 \r\n4. 失败重试\r\n   - 在上传失败时可设置自动重试逻辑。超过最大重试次数则最终上传失败。\r\n5. 针对不同文件设置不同分片\r\n    - 合理的分片能够更好的利用带宽，增加上传速度。\r\n    - 同域名下的浏览器并发限制为6个（不同浏览器，不同版本可能限制存在差异，主要目的是需要合理的限制并发数）\r\n    - 根据文件大小，以及并发数量，计算出分片数量以及每片大小。\r\n6. 使用加速域名\r\n   - 如果客户端由于地域原因导致上传慢或者失败。可在上传失败时启用加速域名进行加速上传（修改oss config）。\r\n7. 文件检查\r\n   - 在上传之前可简单进行文件类型，大小等检查。如果不符合业务则直接给出提示即可。\r\n\r\n### 代码实现\r\n\r\n- refreshSTSTokenInterval 可根据业务情况进行修改。\r\n- calcPart 可根据业务情况自行实现。\r\n\r\n```javascript\r\nlet client;\r\n\r\nconst uploadConfig = {\r\n  fileList: [],\r\n  params: new Map(),\r\n  data: {},\r\n};\r\n\r\nconst multipartUpload = (file) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const res = await getOssConfig();\r\n\r\n    const startTime = Date.now();\r\n\r\n    client = new OSS({\r\n      ...getStsConfig(uploadConfig.data.sts_config),\r\n      refreshSTSToken: async () => {\r\n        const info = await getOssConfig();\r\n        return {\r\n          accessKeyId: info.accessKeyId,\r\n          accessKeySecret: info.accessKeySecret,\r\n          stsToken: info.stsToken,\r\n        };\r\n      },\r\n      refreshSTSTokenInterval: interval * 60 * 1000,\r\n    });\r\n\r\n    client\r\n      .multipartUpload(dir, file.file, {\r\n        progress: (p) => {\r\n          const costTime = (Date.now() - startTime) / 1000;\r\n          const uploadedSize = ((file.file?.size || 0) * p) / 1024 / 1024;\r\n          const fileSpeed = (uploadedSize / costTime).toFixed(2);\r\n\r\n          console.table({\r\n            '0-name': file.name,\r\n            '1-fileSize': (file.file?.size || 0) / 1024 / 1024 + 'M',\r\n            '2-progress': p * 100 + '%',\r\n            '3-costTime': costTime + 's',\r\n            '4-uploadedSize': uploadedSize + 'M',\r\n            '5-fileSpeed': fileSpeed + 'M/s',\r\n            '6-partSize': calcPart(file.file?.size || 0).partSize / 1024 / 1024 + 'M',\r\n          });\r\n\r\n          uploadConfig.speedMap[file.name] = fileSpeed;\r\n        },\r\n        ...calcPart(file.file?.size || 0),\r\n      })\r\n      .then((res) => {\r\n        uploadConfig.retryMap[file.name] = 0;\r\n        delete uploadConfig.speedMap[file.name];\r\n        resolve(res);\r\n      })\r\n      .catch(async (err) => {\r\n        if (err?.message?.includes('expired') && uploadConfig.retryMap[file.name] < 3) {\r\n          try {\r\n            uploadConfig.retryMap[file.name] += 1;\r\n            uploadConfig.data = await getOssConfig();\r\n            resolve(await multipartUpload(file));\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        } else {\r\n          uploadConfig.retryMap[file.name] = 0;\r\n          reject(err?.message || err?.name);\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\nfunction calcPart(size) {\r\n  const mbSize = size / 1024 / 1024;\r\n\r\n  const config = {\r\n    parallel: 6,\r\n    partSize: size,\r\n  };\r\n\r\n  if (mbSize > 12 && mbSize <= 50) {\r\n    config.partSize = Math.ceil(mbSize / 6) * 1024 * 1024;\r\n  }\r\n\r\n  if (mbSize > 50 && mbSize <= 100) {\r\n    config.partSize = Math.ceil(mbSize / 12) * 1024 * 1024;\r\n  }\r\n\r\n  if (mbSize > 100) {\r\n    config.partSize = Math.ceil(mbSize / 18) * 1024 * 1024;\r\n  }\r\n\r\n  return config;\r\n}\r\n```\r\n","author":"z0ffy","reactions":{"url":"https://api.github.com/repos/z0ffy/z0ffy.github.io/issues/24/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"labels":["published","前端"]}},"__N_SSG":true}